name: actions with IAM role
'on':
  - push

env:
  AWS_REGION: ${{secrets.AWS_REGION}}
  IAM_ROLE: ${{secrets.IAM_ROLE}}
  S3_BUCKET: mr-bucket-balls-pop-out-of-my-mouth
  TAR_FILE: reactoscope.tar.gz
  EC2_INSTANCE_ID: ${{secrets.EC2_INSTANCE_ID}}
  EC2_USER: ubuntu
  EC2_KEY: ${{secrets.EC2_KEY}}

permissions:
  contents: read
  id-token: write

jobs:
  AssumeRole:
    runs-on: ubuntu-latest
    steps:
      - name: clone repository
        uses: actions/checkout@v4

      - name: tarball it
        run: |
          mkdir -p /tmp/reactoscope
          cp -r . /tmp/reactoscope
          tar -czvf ${{env.TAR_FILE}} -C /tmp/reactoscope .

      - name: config AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{env.IAM_ROLE}}
          role-session-name: github-actions-federation
          aws-region: ${{env.AWS_REGION}}

      - name: upload to S3
        run: aws s3 cp ${{env.TAR_FILE}} s3://${{env.S3_BUCKET}}/

      - name: start EC2 instance
        run: aws ec2 start-instances --instance-ids ${{env.EC2_INSTANCE_ID}}

      - name: wait for EC2 instance to be running
        run: aws ec2 wait instance-running --instance-ids ${{env.EC2_INSTANCE_ID}}

      - name: get EC2 public DNS
        id: ec2
        run: |
          EC2_PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids ${{env.EC2_INSTANCE_ID}} --query "Reservations[0].Instances[0].PublicDnsName" --output text)
          echo "::set-output name=EC2_PUBLIC_DNS::$EC2_PUBLIC_DNS"

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.0.3
