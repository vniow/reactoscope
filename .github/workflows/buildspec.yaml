name: actions with IAM role
'on':
  - push

env:
  AWS_REGION: ${{secrets.AWS_REGION}}
  IAM_ROLE: ${{secrets.IAM_ROLE}}
  INSTANCE_TYPE: t2.micro
  IMAGE_RECIPE_ARN: arn:aws:imagebuilder:us-east-2:744657158806:image-recipe/reactoscope-ami/0.0.1
  KEY_NAME: reactoscope
  SECURITY_GROUP: sg-0802300961999d6ec
  SUBNET_ID: subnet-4ed42225
  INSTANCE_PROFILE: EC2InstanceProfileForImageBuilder

permissions:
  contents: read
  id-token: write

jobs:
  AssumeRole:
    runs-on: ubuntu-latest
    steps:
      - name: clone repository
        uses: actions/checkout@v4

      - name: config AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{env.IAM_ROLE}}
          role-session-name: github-actions-federation
          aws-region: ${{env.AWS_REGION}}

      - name: Create Infrastructure Configuration
        id: create_infra_config
        run: |
          INFRA_CONFIG_ARN=$(aws imagebuilder create-infrastructure-configuration \
            --name my-infra-config \
            --instance-types ${{ env.INSTANCE_TYPE }} \
            --security-group-ids ${{ env.SECURITY_GROUP }} \
            --subnet-id ${{ env.SUBNET_ID }} \
            --instance-profile-name ${{ env.INSTANCE_PROFILE }} \
            --key-pair ${{ env.KEY_NAME }} \
            --terminate-instance-on-failure \
            --query 'infrastructureConfigurationArn' \
            --output text)
          echo "INFRA_CONFIG_ARN=${INFRA_CONFIG_ARN}" >> $GITHUB_ENV

      - name: Start Image Build
        id: start_image_build
        run: |
          BUILD_ID=$(aws imagebuilder start-image-pipeline-execution \
            --image-pipeline-arn ${{ env.PIPELINE_ID }} \
            --query 'imageBuildVersionArn' \
            --output text)
          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_ENV

      - name: Wait for Image Build to Complete
        run: |
          aws imagebuilder wait image-build-completed \
            --image-build-version-arn ${{ env.BUILD_ID }}

      - name: Get AMI ID
        id: get_ami_id
        run: |
          AMI_ID=$(aws imagebuilder list-images \
            --filters "name=name,values=my-image-pipeline" \
            --query 'imageVersionList[0].imageId' \
            --output text)
          echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV

      - name: Create EC2 instance
        id: create_ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ env.AMI_ID }} \
            --instance-type ${{ env.INSTANCE_TYPE }} \
            --key-name ${{ env.KEY_NAME }} \
            --security-group-ids ${{ env.SECURITY_GROUP }} \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV

      - name: Wait for EC2 instance to be running
        run: aws ec2 wait instance-running --instance-ids ${{ env.INSTANCE_ID }}

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.0.3

      - name: build Docker image
        run: docker build -t ${{ github.repository }} .

      - name: tarball it
        run: docker save ${{ github.repository }} -o ${{ github.repository }}_image.tar

      - name: Upload tarball to S3
        run: aws s3 cp ${{ github.repository }}_image.tar s3://${{ secrets.S3_BUCKET }}/

      - name: Download tarball and deploy on EC2
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceids,Values=${{ env.INSTANCE_ID }}" \
            --parameters 'commands=["aws s3 cp s3://${{ secrets.S3_BUCKET }}/${{ github.repository }}_image.tar /home/ec2-user/${{ github.repository }}_image.tar", "docker load -i /home/ec2-user/${{ github.repository }}_image.tar", "docker rm -f my-docker-container || true", "docker run -d -p 80:80 --name my-docker-container -v /home/ec2-user/app:/app ${{ github.repository }}"]' \
            --region ${{ env.AWS_REGION }}
